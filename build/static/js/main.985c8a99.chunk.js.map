{"version":3,"sources":["shared/constants/routes.js","frontend/history.js","frontend/components/Home.js","shared/constants/Home.js","shared/actions/Home.js","frontend/containers/Home.js","frontend/components/Main.js","shared/constants/Main.js","shared/actions/Main.js","frontend/containers/Main.js","frontend/components/routes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HOME_ROUTE","MAIN_ROUTE","history","createHashHistory","hashType","Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","showNotifications","bind","assertThisInitialized","handleClick","n","supported","show","alert","JSON","stringify","event","close","target","tag","type","_this2","react_default","a","createElement","Button","onClick","changeType","_this3","content","home","Container","Typography","variant","gutterBottom","Divider","push","build_default","onRef","ref","title","body","timeout","React","Component","homeTypes","homeActions","payload","Home_Container","connect","state","dispatch","Main","num","changeNum","main","mainTypes","mainActions","Main_Container","Routes","react_router","path","component","to","pathname","App","className","components_routes","Boolean","window","location","hostname","match","store","Store","portName","ready","then","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.985c8a99.chunk.js","sourcesContent":["const HOME_ROUTE = '/home'\nconst MAIN_ROUTE = '/main'\nmodule.exports = {\n    HOME_ROUTE,\n    MAIN_ROUTE\n}\n","import { createHashHistory } from 'history'\n\nconst history = createHashHistory({hashType: 'slash',})\n\nexport default history\n","import React from 'react';\nimport { Typography, Container, Button, Divider } from '@material-ui/core';\nimport { MAIN_ROUTE } from \"../../shared/constants/routes\";\nimport ReactNotifications from 'react-browser-notifications';\n\nclass Home extends React.Component {\n    constructor(props) {\n        super(props);\n        this.showNotifications = this.showNotifications.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n    }\n    showNotifications() {\n        if(this.n.supported()){\n            this.n.show();\n        }else{\n            alert(JSON.stringify(this.n))\n        }\n    }\n    handleClick(event) {\n        this.n.close(event.target.tag);\n    }\n    content(type) {\n        switch(type){\n            case 'Home':\n                return <Button onClick={() => this.props.changeType('Not Home')}>Click to switch variable type to Not Home</Button>;\n            case 'Not Home':\n                return <Button onClick={() => this.props.changeType('Home')}>Click to switch variable type to Home</Button>;\n            default:\n                return;\n        }\n    }\n    render() {\n        let content = this.content(this.props.home.type)\n        return (\n            <Container>\n                <Typography variant=\"h4\" gutterBottom>You are now in Home Page</Typography>\n                <Divider />\n                {content}\n                <Divider />\n                <Typography variant=\"h7\" gutterBottom>The value of variable type is {this.props.home.type}</Typography>\n                <Divider />\n                <Button onClick={() => this.props.history.push(MAIN_ROUTE)}>Click to switch pages</Button>\n                <ReactNotifications\n                    onRef={ref => (this.n = ref)} // Required\n                    title=\"Hey There!\" // Required\n                    body=\"This is the body\"\n                    timeout=\"2000\"\n                    onClick={event => this.handleClick(event)}\n                />\n                <button onClick={this.showNotifications}>\n                    Notify Me!\n                </button>\n            </Container>\n        )\n    }\n}\n\nexport default Home\n","export const homeTypes = {\n    CHANGE_TYPE: 'CHANGE_TYPE'\n}","import {\n    homeTypes\n} from '../constants/Home'\n\nexport const homeActions = {\n    changeType: (type) => ({\n        type: homeTypes.CHANGE_TYPE,\n        payload: {type}\n    })\n}","import Home from '../components/Home'\nimport { homeActions } from '../../shared/actions/Home'\nimport { connect } from 'react-redux'\n\nconst mapStateToProps = state => {\n    const { home } = state;\n    return { home }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        changeType: (type) => {\n            dispatch(homeActions.changeType(type))\n        }\n    }\n}\n\nconst Home_Container = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Home)\n\nexport default Home_Container\n","import React from 'react';\nimport { Typography, Container, Button, Divider } from '@material-ui/core';\nimport { HOME_ROUTE } from \"../../shared/constants/routes\";\n\nclass Main extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    content(num) {\n        switch(num){\n            case 0:\n                return <Button onClick={() => this.props.changeNum(1)}>Click to switch variable type to 1</Button>;\n            case 1:\n                return <Button onClick={() => this.props.changeNum(0)}>Click to switch variable type to 0</Button>;\n            default:\n                return;\n        }\n    }\n    render() {\n        let content = this.content(this.props.main.num)\n        return (\n            <Container>\n                <Typography variant=\"h4\" gutterBottom>You are now in Main Page</Typography>\n                <Divider />\n                {content}\n                <Divider />\n                <Typography variant=\"h7\" gutterBottom>The value of variable num is {this.props.main.num}</Typography>\n                <Divider />\n                <Button onClick={() => this.props.history.push(HOME_ROUTE)}>Click to switch pages</Button>\n            </Container>\n        )\n    }\n}\n\nexport default Main\n","export const mainTypes = {\n    CHANGE_NUM: 'CHANGE_NUM'\n}","import {\n    mainTypes\n} from '../constants/Main'\n\nexport const mainActions = {\n    changeNum: (num) => ({\n        type: mainTypes.CHANGE_NUM,\n        payload: {num}\n    })\n}","import Main from '../components/Main'\nimport { mainActions } from '../../shared/actions/Main'\nimport { connect } from 'react-redux'\n\nconst mapStateToProps = state => {\n    const { main } = state;\n    return { main }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        changeNum: (num) => {\n            dispatch(mainActions.changeNum(num))\n        }\n    }\n}\n\nconst Main_Container = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Main)\n\nexport default Main_Container\n","import { Redirect, Route, Switch } from 'react-router-dom'\nimport { Router } from \"react-router\";\nimport React, { Component }  from 'react'\nimport history from \"../history\"\nimport { HOME_ROUTE, MAIN_ROUTE } from \"../../shared/constants/routes\"\nimport Home from '../containers/Home';\nimport Main from '../containers/Main';\n\nclass Routes extends Component {\n    render() {\n        return (\n            <Router history = {history}>\n                <Switch>\n                    <Route path={HOME_ROUTE} component={Home} />\n                    <Route path={MAIN_ROUTE} component={Main} />\n                    <Redirect to={{ pathname: HOME_ROUTE }} />\n                </Switch>\n            </Router>\n        )\n    }\n}\n\nexport default Routes\n","import React from 'react';\nimport './App.css';\nimport Routes from './frontend/components/routes'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Routes />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Store} from 'webext-redux';\n\nconst store = new Store({\n    portName: 'LOCALSTORE',\n})\n\nstore.ready().then(() => {\n    ReactDOM.render(\n        <Provider store={store}>\n            <App />\n        </Provider>,\n        document.getElementById('root')\n    )\n})\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}